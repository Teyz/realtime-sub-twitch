import type { ApiClient } from 'twitch';
import type { ConnectCompatibleApp } from './ConnectCompatibleApp';
import { EventSubBase } from './EventSubBase';
import type { EventSubConfig } from './EventSubListener';
/**
 * The configuration of the EventSub middleware.
 *
 * @inheritDoc
 */
export interface EventSubMiddlewareConfig extends EventSubConfig {
    /**
     * The host name the root application is available under.
     */
    hostName: string;
    /**
     * The path your listener is mounted under.
     */
    pathPrefix?: string;
    /**
     * Your EventSub secret.
     *
     * This should be a randomly generated string, but it should be the same between restarts.
     *
     * WARNING: Please do not use your application's client secret!
     */
    secret: string;
}
/**
 * A connect-compatible middleware for the Twitch EventSub event distribution mechanism.
 *
 * @hideProtected
 * @inheritDoc
 */
export declare class EventSubMiddleware extends EventSubBase {
    private readonly _hostName;
    private readonly _pathPrefix?;
    /**
     * Creates a new EventSub middleware wrapper.
     *
     * @param apiClient The ApiClient instance to use for user info and API requests.
     * @param config
     *
     * @expandParams
     */
    constructor(apiClient: ApiClient, config: EventSubMiddlewareConfig);
    /**
     * Applies middleware that handles EventSub notifications to a connect-compatible app (like express).
     *
     * The express app should be started before this.
     *
     * @param app The app the middleware should be applied to.
     */
    apply(app: ConnectCompatibleApp): Promise<void>;
    markAsReady(): Promise<void>;
    protected getHostName(): Promise<string>;
    protected getPathPrefix(): Promise<string | undefined>;
}
