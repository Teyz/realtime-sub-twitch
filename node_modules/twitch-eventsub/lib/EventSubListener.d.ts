import type { LoggerOptions } from '@d-fischer/logger';
import type { ApiClient } from 'twitch';
import type { ConnectionAdapter } from './Adapters/ConnectionAdapter';
import type { ConnectCompatibleApp } from './ConnectCompatibleApp';
import { EventSubBase } from './EventSubBase';
/**
 * Certificate data used to make the listener server SSL capable.
 */
export interface EventSubListenerCertificateConfig {
    /**
     * The private key of your SSL certificate.
     */
    key: string;
    /**
     * Your full SSL certificate chain, including all intermediate certificates.
     */
    cert: string;
}
/**
 * The configuration of a EventSub listener.
 */
export interface EventSubConfig {
    /**
     * Options to pass to the logger.
     */
    logger?: Partial<LoggerOptions>;
}
/**
 * A listener for the Twitch EventSub event distribution mechanism.
 *
 * @hideProtected
 * @inheritDoc
 */
export declare class EventSubListener extends EventSubBase {
    private _server?;
    private readonly _adapter;
    /**
     * Creates a new EventSub listener.
     *
     * @param apiClient The ApiClient instance to use for user info and API requests.
     * @param secret The secret for Twitch to sign payloads with.
     * @param adapter The connection adapter.
     * @param config
     *
     * @expandParams
     */
    constructor(apiClient: ApiClient, adapter: ConnectionAdapter, secret: string, config?: EventSubConfig);
    /**
     * Starts the backing server and listens to incoming EventSub notifications.
     */
    listen(port?: number): Promise<void>;
    /**
     * Resumes subscriptions that are already registered with Twitch.
     *
     * @deprecated No replacement; this should only be used with middleware.
     */
    resumeExistingSubscriptions(): Promise<void>;
    /**
     * Stops the backing server, suspending all active subscriptions.
     */
    unlisten(): Promise<void>;
    /**
     * Applies middleware that handles EventSub notifications to a connect-compatible app (like express).
     *
     * The express app should be started before this.
     *
     * @param app The app the middleware should be applied to.
     *
     * @deprecated Use {@EventSubMiddleware#applyToApp} instead.
     */
    applyMiddleware(app: ConnectCompatibleApp): Promise<void>;
    protected getHostName(): Promise<string>;
    protected getPathPrefix(): Promise<string | undefined>;
}
