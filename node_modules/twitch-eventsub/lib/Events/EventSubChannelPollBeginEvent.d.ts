import type { ApiClient, HelixUser } from 'twitch';
import type { EventSubChannelPollBeginChoiceData } from './Common/EventSubChannelPollBeginChoice';
import { EventSubChannelPollBeginChoice } from './Common/EventSubChannelPollBeginChoice';
import type { EventSubChannelPollVoteTypeSettingsData } from './Common/EventSubChannelPollVoteTypeSettingsData';
/** @private */
export interface EventSubChannelPollBeginEventData {
    id: string;
    broadcaster_user_id: string;
    broadcaster_user_login: string;
    broadcaster_user_name: string;
    title: string;
    choices: EventSubChannelPollBeginChoiceData[];
    bits_voting: EventSubChannelPollVoteTypeSettingsData;
    channel_points_voting: EventSubChannelPollVoteTypeSettingsData;
    started_at: string;
    ends_at: string;
}
/**
 * An EventSub event representing a poll starting in a channel.
 */
export declare class EventSubChannelPollBeginEvent {
    private readonly _data;
    /** @private */
    protected readonly _client: ApiClient;
    /** @private */
    constructor(_data: EventSubChannelPollBeginEventData, client: ApiClient);
    /**
     * The ID of the poll.
     */
    get id(): string;
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The title of the poll.
     */
    get title(): string;
    /**
     * The choices of the poll.
     */
    get choices(): EventSubChannelPollBeginChoice[];
    /**
     * Whether voting with bits is enabled.
     */
    get isBitsVotingEnabled(): boolean;
    /**
     * The amount of bits a vote costs.
     */
    get bitsPerVote(): number;
    /**
     * Whether voting with channel points is enabled.
     */
    get isChannelPointsVotingEnabled(): boolean;
    /**
     * The amount of channel points a vote costs.
     */
    get channelPointsPerVote(): number;
    /**
     * The time when the poll started.
     */
    get startDate(): Date;
    /**
     * The time when the poll ends.
     */
    get endDate(): Date;
}
