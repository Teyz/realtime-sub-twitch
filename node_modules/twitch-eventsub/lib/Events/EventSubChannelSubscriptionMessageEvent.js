"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelSubscriptionMessageEvent = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * An EventSub event representing the public announcement of a channel subscription by the subscriber.
 */
var EventSubChannelSubscriptionMessageEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelSubscriptionMessageEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "userId", {
        /**
         * The ID of the user whose subscription is being announced.
         */
        get: function () {
            return this._data.user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "userName", {
        /**
         * The name of the user whose subscription is being announced.
         */
        get: function () {
            return this._data.user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "userDisplayName", {
        /**
         * The display name of the user whose subscription is being announced.
         */
        get: function () {
            return this._data.user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the user whose subscription is being announced.
     */
    EventSubChannelSubscriptionMessageEvent.prototype.getUser = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelSubscriptionMessageEvent.prototype.getBroadcaster = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "tier", {
        /**
         * The tier of the subscription, either 1000, 2000 or 3000.
         */
        get: function () {
            return this._data.tier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "cumulativeMonths", {
        /**
         * The total number of months the user has been subscribed.
         */
        get: function () {
            return this._data.cumulative_months;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "streakMonths", {
        /**
         * The number of months the user has been subscribed in a row, or null if they don't want to share it.
         */
        get: function () {
            return this._data.streak_months;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "durationMonths", {
        /**
         * The number of months the user has now subscribed.
         */
        get: function () {
            return this._data.duration_months;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionMessageEvent.prototype, "messageText", {
        /**
         * The text of the message.
         */
        get: function () {
            return this._data.message.text;
        },
        enumerable: false,
        configurable: true
    });
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], EventSubChannelSubscriptionMessageEvent.prototype, "_client", void 0);
    EventSubChannelSubscriptionMessageEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubChannelSubscriptionMessageEvent', 'userId')
    ], EventSubChannelSubscriptionMessageEvent);
    return EventSubChannelSubscriptionMessageEvent;
}());
exports.EventSubChannelSubscriptionMessageEvent = EventSubChannelSubscriptionMessageEvent;
