import { __awaiter, __decorate, __extends, __generator, __read } from "tslib";
import { rtfm } from 'twitch-common';
import { EventSubBase } from "./EventSubBase.mjs";
/**
 * A connect-compatible middleware for the Twitch EventSub event distribution mechanism.
 *
 * @hideProtected
 * @inheritDoc
 */
var EventSubMiddleware = /** @class */ (function (_super) {
    __extends(EventSubMiddleware, _super);
    /**
     * Creates a new EventSub middleware wrapper.
     *
     * @param apiClient The ApiClient instance to use for user info and API requests.
     * @param config
     *
     * @expandParams
     */
    function EventSubMiddleware(apiClient, config) {
        var _this = _super.call(this, apiClient, config.secret, config) || this;
        _this._hostName = config.hostName;
        _this._pathPrefix = config.pathPrefix;
        return _this;
    }
    /**
     * Applies middleware that handles EventSub notifications to a connect-compatible app (like express).
     *
     * The express app should be started before this.
     *
     * @param app The app the middleware should be applied to.
     */
    EventSubMiddleware.prototype.apply = function (app) {
        return __awaiter(this, void 0, Promise, function () {
            var pathPrefix, paramParser, requestHandler;
            return __generator(this, function (_a) {
                pathPrefix = this._pathPrefix;
                if (pathPrefix) {
                    pathPrefix = "/" + pathPrefix.replace(/^\/|\/$/, '');
                }
                paramParser = function (req, res, next) {
                    var _a = __read(req.path.split('/'), 2), id = _a[1];
                    req.param = req.params = { id: id };
                    next();
                };
                requestHandler = this._createHandleRequest();
                if (pathPrefix) {
                    app.use(pathPrefix, paramParser, requestHandler);
                }
                else {
                    app.use(paramParser, requestHandler);
                }
                return [2 /*return*/];
            });
        });
    };
    EventSubMiddleware.prototype.markAsReady = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._readyToSubscribe = true;
                        return [4 /*yield*/, this._resumeExistingSubscriptions()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EventSubMiddleware.prototype.getHostName = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._hostName];
            });
        });
    };
    EventSubMiddleware.prototype.getPathPrefix = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._pathPrefix];
            });
        });
    };
    EventSubMiddleware = __decorate([
        rtfm('twitch-eventsub', 'EventSubMiddleware')
    ], EventSubMiddleware);
    return EventSubMiddleware;
}(EventSubBase));
export { EventSubMiddleware };
