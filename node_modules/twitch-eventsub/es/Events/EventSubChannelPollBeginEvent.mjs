import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
import { EventSubChannelPollBeginChoice } from "./Common/EventSubChannelPollBeginChoice.mjs";
/**
 * An EventSub event representing a poll starting in a channel.
 */
var EventSubChannelPollBeginEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelPollBeginEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "id", {
        /**
         * The ID of the poll.
         */
        get: function () {
            return this._data.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelPollBeginEvent.prototype.getBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "title", {
        /**
         * The title of the poll.
         */
        get: function () {
            return this._data.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "choices", {
        /**
         * The choices of the poll.
         */
        get: function () {
            return this._data.choices.map(function (data) { return new EventSubChannelPollBeginChoice(data); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "isBitsVotingEnabled", {
        /**
         * Whether voting with bits is enabled.
         */
        get: function () {
            return this._data.bits_voting.is_enabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "bitsPerVote", {
        /**
         * The amount of bits a vote costs.
         */
        get: function () {
            return this._data.bits_voting.amount_per_vote;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "isChannelPointsVotingEnabled", {
        /**
         * Whether voting with channel points is enabled.
         */
        get: function () {
            return this._data.channel_points_voting.is_enabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "channelPointsPerVote", {
        /**
         * The amount of channel points a vote costs.
         */
        get: function () {
            return this._data.channel_points_voting.amount_per_vote;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "startDate", {
        /**
         * The time when the poll started.
         */
        get: function () {
            return new Date(this._data.started_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPollBeginEvent.prototype, "endDate", {
        /**
         * The time when the poll ends.
         */
        get: function () {
            return new Date(this._data.ends_at);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], EventSubChannelPollBeginEvent.prototype, "_client", void 0);
    EventSubChannelPollBeginEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubChannelPollBeginEvent', 'broadcasterId')
    ], EventSubChannelPollBeginEvent);
    return EventSubChannelPollBeginEvent;
}());
export { EventSubChannelPollBeginEvent };
