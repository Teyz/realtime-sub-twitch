import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
/**
 * An EventSub event representing a channel subscription.
 */
var EventSubChannelSubscriptionGiftEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelSubscriptionGiftEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "gifterId", {
        /**
         * The ID of the gifting user.
         */
        get: function () {
            return this._data.user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "gifterName", {
        /**
         * The name of the gifting user.
         */
        get: function () {
            return this._data.user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "gifterDisplayName", {
        /**
         * The display name of the gifting user.
         */
        get: function () {
            return this._data.user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the gifting user.
     */
    EventSubChannelSubscriptionGiftEvent.prototype.getGifter = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelSubscriptionGiftEvent.prototype.getBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "amount", {
        /**
         * The amount of gifts that were gifted.
         */
        get: function () {
            return this._data.total;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "cumulativeAmount", {
        /**
         * The amount of gifts that the gifter has sent in total, or `null` the gift is anonymous.
         */
        get: function () {
            return this._data.cumulative_total;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "tier", {
        /**
         * The tier of the subscription, either 1000, 2000 or 3000.
         */
        get: function () {
            return this._data.tier;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelSubscriptionGiftEvent.prototype, "isAnonymous", {
        /**
         * Whether the gift is anonymous.
         */
        get: function () {
            return this._data.is_anonymous;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], EventSubChannelSubscriptionGiftEvent.prototype, "_client", void 0);
    EventSubChannelSubscriptionGiftEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubChannelSubscriptionGiftEvent', 'gifterId')
    ], EventSubChannelSubscriptionGiftEvent);
    return EventSubChannelSubscriptionGiftEvent;
}());
export { EventSubChannelSubscriptionGiftEvent };
