import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
import { EventSubChannelPredictionOutcome } from "./Common/EventSubChannelPredictionOutcome.mjs";
/**
 * An EventSub event representing a prediction being locked in a channel.
 */
var EventSubChannelPredictionLockEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelPredictionLockEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "id", {
        /**
         * The ID of the prediction.
         */
        get: function () {
            return this._data.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelPredictionLockEvent.prototype.getBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "title", {
        /**
         * The title of the prediction.
         */
        get: function () {
            return this._data.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "outcomes", {
        /**
         * The possible of the prediction.
         */
        get: function () {
            var _this = this;
            return this._data.outcomes.map(function (data) { return new EventSubChannelPredictionOutcome(data, _this._client); });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "startDate", {
        /**
         * The time when the prediction started.
         */
        get: function () {
            return new Date(this._data.started_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelPredictionLockEvent.prototype, "lockDate", {
        /**
         * The time when the prediction was locked.
         */
        get: function () {
            return new Date(this._data.locked_at);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], EventSubChannelPredictionLockEvent.prototype, "_client", void 0);
    EventSubChannelPredictionLockEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubChannelPredictionLockEvent', 'broadcasterId')
    ], EventSubChannelPredictionLockEvent);
    return EventSubChannelPredictionLockEvent;
}());
export { EventSubChannelPredictionLockEvent };
