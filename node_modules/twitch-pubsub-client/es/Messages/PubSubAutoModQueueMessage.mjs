import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
/**
 * A message that informs about a message being processed in the AutoMod queue.
 */
var PubSubAutoModQueueMessage = /** @class */ (function () {
    /** @private */
    function PubSubAutoModQueueMessage(data, _channelId) {
        this._channelId = _channelId;
        this._data = data;
    }
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "channelId", {
        /**
         * The ID of the channel where the message was posted.
         */
        get: function () {
            return this._channelId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "messageId", {
        /**
         * The ID of the message.
         */
        get: function () {
            return this._data.data.message.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "messageContent", {
        /**
         * The content of the message.
         */
        get: function () {
            return this._data.data.message.content.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "foundMessageFragments", {
        /**
         * The fragments of the message that were found to be against the moderation level of the channel.
         */
        get: function () {
            return this._data.data.message.content.fragments;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "senderId", {
        /**
         * The ID of the user that sent the message.
         */
        get: function () {
            return this._data.data.message.sender.user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "senderName", {
        /**
         * The name of the user that sent the message.
         */
        get: function () {
            return this._data.data.message.sender.login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "senderDisplayName", {
        /**
         * The display name of the user that sent the message.
         */
        get: function () {
            return this._data.data.message.sender.display_name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "senderColor", {
        /**
         * The chat color of the user that sent the message.
         */
        get: function () {
            return this._data.data.message.sender.chat_color;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "sendDate", {
        /**
         * The date when the message was sent.
         */
        get: function () {
            return new Date(this._data.data.message.sent_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "contentClassification", {
        /**
         * The classification of the message content.
         */
        get: function () {
            return this._data.data.content_classification;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "status", {
        /**
         * The status of the queue entry.
         */
        get: function () {
            return this._data.data.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "resolverId", {
        /**
         * The ID of the user that resolved the queue entry, or null if it was not resolved or timed out.
         */
        get: function () {
            return this._data.data.resolver_id || null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PubSubAutoModQueueMessage.prototype, "resolverName", {
        /**
         * The name of the user that resolved the queue entry, or null if it was not resolved or timed out.
         */
        get: function () {
            return this._data.data.resolver_login || null;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], PubSubAutoModQueueMessage.prototype, "_data", void 0);
    PubSubAutoModQueueMessage = __decorate([
        rtfm('twitch-pubsub-client', 'PubSubAutoModQueueMessage', 'messageId')
    ], PubSubAutoModQueueMessage);
    return PubSubAutoModQueueMessage;
}());
export { PubSubAutoModQueueMessage };
