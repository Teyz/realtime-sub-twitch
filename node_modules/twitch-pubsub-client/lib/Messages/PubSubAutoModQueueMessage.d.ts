/** @private */
export interface PubSubAutoModQueueMessageAutoModInternals {
    topics: Record<string, number>;
}
/** @private */
export interface PubSubAutoModQueueMessageFragment {
    text: string;
    automod: PubSubAutoModQueueMessageAutoModInternals;
}
/** @private */
export interface PubSubAutoModQueueMessageDetailContent {
    text: string;
    fragments: PubSubAutoModQueueMessageFragment[];
}
/** @private */
export interface PubSubAutoModQueueMessageSenderData {
    user_id: string;
    login: string;
    display_name: string;
    chat_color: string;
}
/** @private */
export interface PubSubAutoModQueueMessageDetail {
    id: string;
    content: PubSubAutoModQueueMessageDetailContent;
    sender: PubSubAutoModQueueMessageSenderData;
    sent_at: string;
}
/** @private */
export interface PubSubAutoModQueueMessageContentClassification {
    category: string;
    level: number;
}
export declare type PubSubAutoModQueueStatus = 'PENDING' | 'ALLOWED' | 'DENIED' | 'EXPIRED';
/** @private */
export interface PubSubAutoModQueueMessageContent {
    message: PubSubAutoModQueueMessageDetail;
    content_classification: PubSubAutoModQueueMessageContentClassification;
    status: PubSubAutoModQueueStatus;
    reason_code: string;
    resolver_id: string;
    resolver_login: string;
}
/** @private */
export interface PubSubAutoModQueueMessageData {
    type: 'automod_caught_message';
    data: PubSubAutoModQueueMessageContent;
}
/**
 * A message that informs about a message being processed in the AutoMod queue.
 */
export declare class PubSubAutoModQueueMessage {
    private readonly _channelId;
    private readonly _data;
    /** @private */
    constructor(data: PubSubAutoModQueueMessageData, _channelId: string);
    /**
     * The ID of the channel where the message was posted.
     */
    get channelId(): string;
    /**
     * The ID of the message.
     */
    get messageId(): string;
    /**
     * The content of the message.
     */
    get messageContent(): string;
    /**
     * The fragments of the message that were found to be against the moderation level of the channel.
     */
    get foundMessageFragments(): PubSubAutoModQueueMessageFragment[];
    /**
     * The ID of the user that sent the message.
     */
    get senderId(): string;
    /**
     * The name of the user that sent the message.
     */
    get senderName(): string;
    /**
     * The display name of the user that sent the message.
     */
    get senderDisplayName(): string;
    /**
     * The chat color of the user that sent the message.
     */
    get senderColor(): string;
    /**
     * The date when the message was sent.
     */
    get sendDate(): Date;
    /**
     * The classification of the message content.
     */
    get contentClassification(): PubSubAutoModQueueMessageContentClassification;
    /**
     * The status of the queue entry.
     */
    get status(): PubSubAutoModQueueStatus;
    /**
     * The ID of the user that resolved the queue entry, or null if it was not resolved or timed out.
     */
    get resolverId(): string | null;
    /**
     * The name of the user that resolved the queue entry, or null if it was not resolved or timed out.
     */
    get resolverName(): string | null;
}
