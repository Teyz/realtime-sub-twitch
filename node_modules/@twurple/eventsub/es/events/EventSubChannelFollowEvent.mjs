import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from '@twurple/common';
/**
 * An EventSub event representing a channel being followed.
 */
let EventSubChannelFollowEvent = class EventSubChannelFollowEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the following user.
     */
    get userId() {
        return this._data.user_id;
    }
    /**
     * The name of the following user.
     */
    get userName() {
        return this._data.user_login;
    }
    /**
     * The display name of the following user.
     */
    get userDisplayName() {
        return this._data.user_name;
    }
    /**
     * Retrieves more information about the following user.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.user_id));
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The date when the user followed.
     */
    get followDate() {
        return new Date(this._data.followed_at);
    }
};
__decorate([
    Enumerable(false)
], EventSubChannelFollowEvent.prototype, "_client", void 0);
EventSubChannelFollowEvent = __decorate([
    rtfm('eventsub', 'EventSubChannelFollowEvent', 'userId')
], EventSubChannelFollowEvent);
export { EventSubChannelFollowEvent };
