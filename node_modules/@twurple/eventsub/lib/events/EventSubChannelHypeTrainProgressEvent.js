"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelHypeTrainProgressEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing progress towards the Hype Train goal.
 */
let EventSubChannelHypeTrainProgressEvent = class EventSubChannelHypeTrainProgressEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The current level of the Hype Train.
     */
    get level() {
        return this._data.level;
    }
    /**
     * The total points contributed to the Hype Train.
     */
    get total() {
        return this._data.total;
    }
    /**
     * The number of points contributed to the Hype Train at the current level.
     */
    get progress() {
        return this._data.progress;
    }
    /**
     * The number of points required to reach the next level.
     */
    get goal() {
        return this._data.goal;
    }
    /**
     * The contributors with the most points, for both bits and subscriptions.
     */
    get topContributions() {
        return this._data.top_contributions;
    }
    /**
     * The most recent contribution.
     */
    get lastContribution() {
        return this._data.last_contribution;
    }
    /**
     * The time when the Hype Train started.
     */
    get startDate() {
        return new Date(this._data.started_at);
    }
    /**
     * The time when the Hype Train is expected to end, unless extended by reaching the goal.
     */
    get expiryDate() {
        return new Date(this._data.expires_at);
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubChannelHypeTrainProgressEvent.prototype, "_client", void 0);
EventSubChannelHypeTrainProgressEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubChannelHypeTrainProgressEvent', 'broadcasterId')
], EventSubChannelHypeTrainProgressEvent);
exports.EventSubChannelHypeTrainProgressEvent = EventSubChannelHypeTrainProgressEvent;
