"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelSubscriptionEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing a channel subscription.
 */
let EventSubChannelSubscriptionEvent = class EventSubChannelSubscriptionEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the subscribing user.
     */
    get userId() {
        return this._data.user_id;
    }
    /**
     * The name of the subscribing user.
     */
    get userName() {
        return this._data.user_login;
    }
    /**
     * The display name of the subscribing user.
     */
    get userDisplayName() {
        return this._data.user_name;
    }
    /**
     * Retrieves more information about the subscription.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.user_id));
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The tier of the subscription, either 1000, 2000 or 3000.
     */
    get tier() {
        return this._data.tier;
    }
    /**
     * Whether the subscription has been gifted.
     */
    get isGift() {
        return this._data.is_gift;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubChannelSubscriptionEvent.prototype, "_client", void 0);
EventSubChannelSubscriptionEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubChannelSubscriptionEvent', 'userId')
], EventSubChannelSubscriptionEvent);
exports.EventSubChannelSubscriptionEvent = EventSubChannelSubscriptionEvent;
