"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelRewardEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing a broadcaster adding, updating or removing a Channel Points reward for their channel.
 */
let EventSubChannelRewardEvent = class EventSubChannelRewardEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the reward.
     */
    get id() {
        return this._data.id;
    }
    /**
     * The ID of the broadcaster the reward belongs to.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster the reward belongs to.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster the reward belongs to.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the reward's broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * Whether the reward is enabled (shown to users).
     */
    get isEnabled() {
        return this._data.is_enabled;
    }
    /**
     * Whether the reward is paused. If true, users can't redeem it.
     */
    get isPaused() {
        return this._data.is_paused;
    }
    /**
     * Whether the reward is currently in stock.
     */
    get isInStock() {
        return this._data.is_in_stock;
    }
    /**
     * The title of the reward.
     */
    get title() {
        return this._data.title;
    }
    /**
     * The channel points cost of the reward.
     */
    get cost() {
        return this._data.cost;
    }
    /**
     * The prompt shown to users when redeeming the reward.
     */
    get prompt() {
        return this._data.prompt;
    }
    /**
     * Whether users need to enter information when redeeming the reward.
     */
    get userInputRequired() {
        return this._data.is_user_input_required;
    }
    /**
     * Whether redemptions should be automatically approved.
     */
    get autoApproved() {
        return this._data.should_redemptions_skip_request_queue;
    }
    /**
     * The time when the cooldown expires.
     */
    get cooldownExpiryDate() {
        return this._data.cooldown_expires_at ? new Date(this._data.cooldown_expires_at) : null;
    }
    /**
     * How often the reward was already redeemed this stream.
     *
     * Only available when the stream is live and `maxRedemptionsPerStream` is set. Otherwise, this is `null`.
     */
    get redemptionsThisStream() {
        return this._data.redemptions_redeemed_current_stream;
    }
    /**
     * The maximum number of redemptions of the reward per stream. `null` means no limit.
     */
    get maxRedemptionsPerStream() {
        return this._data.max_per_stream.is_enabled ? this._data.max_per_stream.value : null;
    }
    /**
     * The maximum number of redemptions of the reward per stream for each user. `null` means no limit.
     */
    get maxRedemptionsPerUserPerStream() {
        return this._data.max_per_user_per_stream.is_enabled ? this._data.max_per_user_per_stream.value : null;
    }
    /**
     * The cooldown between two redemptions of the reward, in seconds. `null` means no cooldown.
     */
    get globalCooldown() {
        return this._data.global_cooldown.is_enabled ? this._data.global_cooldown.seconds : null;
    }
    /**
     * The background color of the reward.
     */
    get backgroundColor() {
        return this._data.background_color;
    }
    /**
     * Gets the URL of the image of the reward in the given scale.
     *
     * @param scale The scale of the image.
     */
    getImageUrl(scale) {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style
        const urlProp = `url_${scale}x`;
        return (_b = (_a = this._data.image) === null || _a === void 0 ? void 0 : _a[urlProp]) !== null && _b !== void 0 ? _b : this._data.default_image[urlProp];
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubChannelRewardEvent.prototype, "_client", void 0);
EventSubChannelRewardEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubChannelRewardEvent', 'id')
], EventSubChannelRewardEvent);
exports.EventSubChannelRewardEvent = EventSubChannelRewardEvent;
