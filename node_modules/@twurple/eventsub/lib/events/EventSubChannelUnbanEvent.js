"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelUnbanEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing a user being unbanned in a channel.
 */
let EventSubChannelUnbanEvent = class EventSubChannelUnbanEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the unbanned user.
     */
    get userId() {
        return this._data.user_id;
    }
    /**
     * The name of the unbanned user.
     */
    get userName() {
        return this._data.user_login;
    }
    /**
     * The display name of the unbanned user.
     */
    get userDisplayName() {
        return this._data.user_name;
    }
    /**
     * Retrieves more information about the unbanned user.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.user_id));
    }
    /**
     * The ID of the broadcaster from whose chat the user was unbanned.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster from whose chat the user was unbanned.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster from whose chat the user was unbanned.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The ID of the moderator who issued the unban.
     */
    get moderatorId() {
        return this._data.moderator_user_id;
    }
    /**
     * The name of the moderator who issued the unban.
     */
    get moderatorName() {
        return this._data.moderator_user_login;
    }
    /**
     * The display name of the moderator who issued the unban.
     */
    get moderatorDisplayName() {
        return this._data.moderator_user_name;
    }
    /**
     * Retrieves more information about the moderator.
     */
    async getModerator() {
        return (await this._client.helix.users.getUserById(this._data.moderator_user_id));
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubChannelUnbanEvent.prototype, "_client", void 0);
EventSubChannelUnbanEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubChannelUnbanEvent', 'userId')
], EventSubChannelUnbanEvent);
exports.EventSubChannelUnbanEvent = EventSubChannelUnbanEvent;
