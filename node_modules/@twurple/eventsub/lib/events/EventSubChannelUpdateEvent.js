"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelUpdateEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing a change in channel metadata.
 */
let EventSubChannelUpdateEvent = class EventSubChannelUpdateEvent {
    /** @private */
    constructor(_data, client) {
        this._data = _data;
        this._client = client;
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The title of the stream.
     */
    get streamTitle() {
        return this._data.title;
    }
    /**
     * The language of the stream.
     */
    get streamLanguage() {
        return this._data.language;
    }
    /**
     * The ID of the game that is currently being played on the channel.
     */
    get categoryId() {
        return this._data.category_id;
    }
    /**
     * The name of the game that is currently being played on the channel.
     */
    get categoryName() {
        return this._data.category_name;
    }
    /**
     * Retrieves more information about the game that is currently being played on the channel.
     */
    async getGame() {
        return (await this._client.helix.games.getGameById(this._data.category_id));
    }
    /**
     * Whether the channel is flagged as suitable for mature audiences only.
     */
    get isMature() {
        return this._data.is_mature;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubChannelUpdateEvent.prototype, "_client", void 0);
EventSubChannelUpdateEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubChannelUpdateEvent', 'broadcasterId')
], EventSubChannelUpdateEvent);
exports.EventSubChannelUpdateEvent = EventSubChannelUpdateEvent;
