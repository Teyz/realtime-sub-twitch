"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubStreamOnlineEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub event representing a stream going live.
 */
let EventSubStreamOnlineEvent = class EventSubStreamOnlineEvent {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this._data.broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this._data.broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this._data.broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._data.broadcaster_user_id));
    }
    /**
     * The type of the stream going live.
     */
    get streamType() {
        return this._data.type;
    }
    /**
     * The date and time when the stream was started.
     */
    get startDate() {
        return new Date(this._data.started_at);
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubStreamOnlineEvent.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], EventSubStreamOnlineEvent.prototype, "_client", void 0);
EventSubStreamOnlineEvent = tslib_1.__decorate([
    common_1.rtfm('eventsub', 'EventSubStreamOnlineEvent', 'broadcasterId')
], EventSubStreamOnlineEvent);
exports.EventSubStreamOnlineEvent = EventSubStreamOnlineEvent;
