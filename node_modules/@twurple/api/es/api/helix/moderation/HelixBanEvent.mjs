import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from '@twurple/common';
import { HelixBan } from "./HelixBan.mjs";
/**
 * An event that indicates the change of a ban status, i.e. banning or unbanning a user.
 *
 * @inheritDoc
 */
let HelixBanEvent = class HelixBanEvent extends HelixBan {
    /** @private */
    constructor(eventData, client) {
        super(eventData.event_data, client);
        this._eventData = eventData;
    }
    /**
     * The unique ID of the ban event.
     */
    get eventId() {
        return this._eventData.id;
    }
    /**
     * The type of the ban event.
     */
    get eventType() {
        return this._eventData.event_type;
    }
    /**
     * The date of the ban event.
     */
    get eventDate() {
        return new Date(this._eventData.event_timestamp);
    }
    /**
     * The version of the ban event.
     */
    get eventVersion() {
        return this._eventData.version;
    }
    /**
     * The id of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterId() {
        return this._eventData.event_data.broadcaster_id;
    }
    /**
     * The name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterName() {
        return this._eventData.event_data.broadcaster_login;
    }
    /**
     * The display name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterDisplayName() {
        return this._eventData.event_data.broadcaster_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.helix.users.getUserById(this._eventData.event_data.broadcaster_id));
    }
};
__decorate([
    Enumerable(false)
], HelixBanEvent.prototype, "_eventData", void 0);
HelixBanEvent = __decorate([
    rtfm('api', 'HelixBanEvent', 'userId')
], HelixBanEvent);
export { HelixBanEvent };
