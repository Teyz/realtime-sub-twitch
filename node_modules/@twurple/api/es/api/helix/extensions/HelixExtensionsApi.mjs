import { __decorate } from "tslib";
import { rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { createPaginatedResult } from "../HelixPaginatedResult.mjs";
import { makePaginationQuery } from "../HelixPagination.mjs";
import { HelixExtensionTransaction } from "./HelixExtensionTransaction.mjs";
/**
 * The Helix API methods that deal with extensions.
 *
 * Can be accessed using `client.helix.extensions` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const transactions = await api.helix.extionsions.getExtensionTransactions('abcd');
 * ```
 */
let HelixExtensionsApi = class HelixExtensionsApi extends BaseApi {
    /**
     * Retrieves a list of transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    async getExtensionTransactions(extensionId, filter = {}) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'extensions/transactions',
            query: {
                extension_id: extensionId,
                id: filter.transactionIds,
                ...makePaginationQuery(filter)
            }
        });
        return createPaginatedResult(result, HelixExtensionTransaction, this._client);
    }
    /**
     * Creates a paginator for transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    getExtensionTransactionsPaginated(extensionId, filter = {}) {
        return new HelixPaginatedRequest({
            url: 'extensions/transactions',
            query: {
                extension_id: extensionId,
                id: filter.transactionIds
            }
        }, this._client, data => new HelixExtensionTransaction(data, this._client));
    }
};
HelixExtensionsApi = __decorate([
    rtfm('api', 'HelixExtensionsApi')
], HelixExtensionsApi);
export { HelixExtensionsApi };
