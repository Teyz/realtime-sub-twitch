var EmoteSetList_1;
import { __decorate } from "tslib";
import { Cacheable, Cached } from '@d-fischer/cache-decorators';
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from '@twurple/common';
/**
 * A list of emotes, grouped into emote sets, that a user can use.
 */
let EmoteSetList = EmoteSetList_1 = class EmoteSetList {
    /** @private */
    constructor(data) {
        this._data = data;
    }
    /**
     * Finds the emote ID for the given emote code.
     *
     * @param emoteCode The emote code to check for.
     */
    findEmoteId(emoteCode) {
        for (const emoteSet of Object.values(this._data)) {
            for (const emote of emoteSet) {
                if (EmoteSetList_1._testEmoteCode(emote.code, emoteCode)) {
                    return emote.id;
                }
            }
        }
        return undefined;
    }
    static _testEmoteCode(code, text) {
        if (!code.includes('\\')) {
            return code === text;
        }
        const re = new RegExp(code);
        const match = re.exec(text);
        return (match === null || match === void 0 ? void 0 : match.index) === 0 && match[0].length === match.input.length;
    }
};
__decorate([
    Enumerable(false)
], EmoteSetList.prototype, "_data", void 0);
__decorate([
    Cached(Infinity, true)
], EmoteSetList.prototype, "findEmoteId", null);
EmoteSetList = EmoteSetList_1 = __decorate([
    Cacheable,
    rtfm('api', 'EmoteSetList')
], EmoteSetList);
export { EmoteSetList };
