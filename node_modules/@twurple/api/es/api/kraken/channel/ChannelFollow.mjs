import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from '@twurple/common';
import { User } from "../user/User.mjs";
/**
 * A relation of a user following a previously given channel.
 */
let ChannelFollow = class ChannelFollow {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The user following the given channel.
     */
    get user() {
        return new User(this._data.user, this._client);
    }
    /**
     * The ID of the user following the given channel.
     */
    get userId() {
        return this._data.user._id;
    }
    /**
     * Whether the user has notifications enabled for the channel.
     */
    get hasNotifications() {
        return this._data.notifications;
    }
    /**
     * The date when the user followed.
     */
    get followDate() {
        return new Date(this._data.created_at);
    }
};
__decorate([
    Enumerable(false)
], ChannelFollow.prototype, "_data", void 0);
__decorate([
    Enumerable(false)
], ChannelFollow.prototype, "_client", void 0);
ChannelFollow = __decorate([
    rtfm('api', 'ChannelFollow', 'userId')
], ChannelFollow);
export { ChannelFollow };
