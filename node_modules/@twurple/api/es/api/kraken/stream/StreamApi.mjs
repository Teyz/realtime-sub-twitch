import { __decorate } from "tslib";
import { extractUserId, rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { Stream } from "./Stream.mjs";
/**
 * The API methods that deal with streams.
 *
 * Can be accessed using `client.kraken.streams` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.kraken.streams.getStreamByChannel('125328655');
 * ```
 */
let StreamApi = class StreamApi extends BaseApi {
    /**
     * Retrieves the current stream on the given channel.
     *
     * @param channel
     */
    async getStreamByChannel(channel) {
        const channelId = extractUserId(channel);
        const data = await this._client.callApi({ url: `streams/${channelId}` });
        return data.stream ? new Stream(data.stream, this._client) : null;
    }
    /**
     * Retrieves a list of streams.
     *
     * @param channels A channel ID or a list thereof.
     * @param game Show only streams playing a certain game.
     * @param languageCode Show only streams in a certain language.
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getStreams(channels, game, languageCode, type, page, limit = 25) {
        const query = {
            limit: limit.toString(),
            channel: typeof channels === 'string' ? channels : channels === null || channels === void 0 ? void 0 : channels.join(','),
            game,
            language: languageCode,
            stream_type: type,
            offset: page ? ((page - 1) * limit).toString() : undefined
        };
        const data = await this._client.callApi({ url: 'streams', query });
        return data.streams.map(streamData => new Stream(streamData, this._client));
    }
    /**
     * Retrieves a list of all streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getAllStreams(page, limit) {
        return await this.getStreams(undefined, undefined, undefined, 'all', page, limit);
    }
    /**
     * Retrieves a list of all live streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getAllLiveStreams(page, limit) {
        return await this.getStreams(undefined, undefined, undefined, 'live', page, limit);
    }
    /**
     * Retrieves a list of all streams on channels the currently authenticated user is following.
     *
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getFollowedStreams(type, page, limit = 25) {
        const query = { limit: limit.toString() };
        if (type) {
            query.type = type;
        }
        if (page) {
            query.offset = ((page - 1) * limit).toString();
        }
        const data = await this._client.callApi({
            url: 'streams/followed',
            query,
            scope: 'user_read'
        });
        return data.streams.map(streamData => new Stream(streamData, this._client));
    }
};
StreamApi = __decorate([
    rtfm('api', 'StreamApi')
], StreamApi);
export { StreamApi };
