import { __decorate } from "tslib";
import { extractUserId, rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { CheermoteList } from "./CheermoteList.mjs";
/**
 * The API methods that deal with Bits/Cheermotes.
 *
 * Can be accessed using `client.kraken.bits` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.kraken.bits.getCheermotes();
 * ```
 */
let BitsApi = class BitsApi extends BaseApi {
    /**
     * Retrieves global and channel cheermotes.
     *
     * @param channel The channel you want to retrieve the available cheermotes for.
     * If not given, this method retrieves a list of globally available cheermotes.
     * @param includeSponsored Whether to include sponsored cheermotes in the list.
     */
    async getCheermotes(channel, includeSponsored = true) {
        const query = {};
        if (channel) {
            query.channel_id = extractUserId(channel);
        }
        if (includeSponsored) {
            query.include_sponsored = 'true';
        }
        const data = await this._client.callApi({ url: 'bits/actions', query });
        return new CheermoteList(data.actions);
    }
};
BitsApi = __decorate([
    rtfm('api', 'BitsApi')
], BitsApi);
export { BitsApi };
