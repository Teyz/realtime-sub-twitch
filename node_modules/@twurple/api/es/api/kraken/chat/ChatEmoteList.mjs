import { __decorate } from "tslib";
import { Cacheable, Cached, CachedGetter } from '@d-fischer/cache-decorators';
import { Enumerable } from '@d-fischer/shared-utils';
import { ChatEmote, rtfm } from '@twurple/common';
/**
 * A list of emotes.
 */
let ChatEmoteList = class ChatEmoteList {
    /** @private */
    constructor(data) {
        this._data = data;
    }
    /**
     * A list of all emotes in the list.
     */
    get emotes() {
        return this._data.map(emote => new ChatEmote(emote));
    }
    /**
     * Gets all emotes from the list that are from a given emote set.
     *
     * @param setId
     */
    getAllFromSet(setId) {
        return this._data.filter(emote => emote.emoticon_set === setId).map(emote => new ChatEmote(emote));
    }
    /**
     * Finds a single emote by its ID.
     *
     * @param id
     */
    getById(id) {
        const data = this._data.find(emote => emote.id === id);
        return data ? new ChatEmote(data) : null;
    }
};
__decorate([
    Enumerable(false)
], ChatEmoteList.prototype, "_data", void 0);
__decorate([
    CachedGetter()
], ChatEmoteList.prototype, "emotes", null);
__decorate([
    Cached()
], ChatEmoteList.prototype, "getAllFromSet", null);
__decorate([
    Cached()
], ChatEmoteList.prototype, "getById", null);
ChatEmoteList = __decorate([
    Cacheable,
    rtfm('api', 'ChatEmoteList')
], ChatEmoteList);
export { ChatEmoteList };
