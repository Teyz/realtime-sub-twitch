import { __decorate } from "tslib";
import { extractUserId, rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { CreatedVideo } from "./CreatedVideo.mjs";
import { Video } from "./Video.mjs";
/**
 * The API methods that deal with users.
 *
 * Can be accessed using `client.kraken.videos` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await api.kraken.videos.getVideo('85448040');
 * ```
 */
let VideoApi = class VideoApi extends BaseApi {
    /**
     * Retrieves a video by ID.
     *
     * @param id The ID of the video.
     */
    async getVideo(id) {
        const data = await this._client.callApi({ url: `videos/${id}` });
        return new Video(data, this._client);
    }
    /**
     * Retrieves the top videos.
     *
     * @param game Show only videos of a certain game.
     * @param searchPeriod Show only videos from a certain time period.
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getTopVideos(game, searchPeriod, type, languageCode, sort, page, limit = 10) {
        const query = {
            limit: limit.toString(),
            game,
            period: searchPeriod,
            broadcast_type: type,
            language: languageCode,
            sort,
            offset: page ? ((page - 1) * limit).toString() : undefined
        };
        const data = await this._client.callApi({ url: 'videos/top', query });
        return data.vods.map(vod => new Video(vod, this._client));
    }
    /**
     * Retrieves the videos from channels followed by the authenticated user.
     *
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async getFollowedVideos(type, languageCode, sort, page, limit = 10) {
        const query = {
            limit: limit.toString(),
            broadcast_type: type,
            language: languageCode,
            sort,
            offset: page ? ((page - 1) * limit).toString() : undefined
        };
        const data = await this._client.callApi({ url: 'videos/followed', query });
        return data.vods.map(vod => new Video(vod, this._client));
    }
    /**
     * Creates a new video.
     *
     * @param channel The channel to upload the video to.
     * @param createData The data for the video.
     */
    async createVideo(channel, createData) {
        const channelId = extractUserId(channel);
        const data = await this._client.callApi({
            url: 'videos',
            method: 'POST',
            scope: 'channel_editor',
            query: {
                channel_id: channelId,
                ...createData
            }
        });
        return new CreatedVideo(data, this._client);
    }
    /**
     * Completes a video upload.
     *
     * @param id The ID of the video.
     * @param token The upload token.
     */
    async completeVideoUpload(id, token) {
        await this._client.callApi({
            url: `https://uploads.twitch.tv/upload/${id}/complete`,
            type: 'custom',
            method: 'POST',
            auth: false,
            query: {
                upload_token: token
            }
        });
    }
    /**
     * Updates an already uploaded video.
     *
     * @param id The ID of the video.
     * @param updateData The data to change for the video.
     */
    async updateVideo(id, updateData) {
        await this._client.callApi({
            url: `videos/${id}`,
            method: 'PUT',
            scope: 'channel_editor',
            jsonBody: updateData
        });
    }
    /**
     * Deletes a video.
     *
     * @param id The ID of the video.
     */
    async deleteVideo(id) {
        await this._client.callApi({
            url: `videos/${id}`,
            method: 'DELETE',
            scope: 'channel_editor'
        });
    }
};
VideoApi = __decorate([
    rtfm('api', 'VideoApi')
], VideoApi);
export { VideoApi };
