import type { LoggerOptions } from '@d-fischer/logger';
import type { TwitchApiCallFetchOptions, TwitchApiCallOptions } from '@twurple/api-call';
import type { AuthProvider } from '@twurple/auth';
import { TokenInfo } from '@twurple/auth';
import { BadgesApi } from './api/badges/BadgesApi';
import { HelixApiGroup } from './api/helix/HelixApiGroup';
import { KrakenApiGroup } from './api/kraken/KrakenApiGroup';
import { UnsupportedApi } from './api/unsupported/UnsupportedApi';
/**
 * Configuration for an {@ApiClient} instance.
 */
export interface ApiConfig {
    /**
     * An authentication provider that supplies tokens to the client.
     *
     * For more information, see the {@AuthProvider} documentation.
     */
    authProvider: AuthProvider;
    /**
     * Additional options to pass to the fetch method.
     */
    fetchOptions?: TwitchApiCallFetchOptions;
    /**
     * Options to pass to the logger.
     */
    logger?: Partial<LoggerOptions>;
}
/**
 * @private
 */
export interface TwitchApiCallOptionsInternal {
    options: TwitchApiCallOptions;
    clientId?: string;
    accessToken?: string;
    fetchOptions?: TwitchApiCallFetchOptions;
}
/**
 * An API client for the Twitch Kraken and Helix APIs.
 */
export declare class ApiClient {
    private readonly _config;
    private readonly _helixRateLimiter;
    /**
     * Creates a new API client instance.
     *
     * @param config Configuration for the client instance.
     */
    constructor(config: ApiConfig);
    /**
     * Requests scopes from the auth provider.
     *
     * @param scopes The scopes to request.
     */
    requestScopes(scopes: string[]): Promise<void>;
    /**
     * Retrieves information about your access token.
     */
    getTokenInfo(): Promise<TokenInfo>;
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    callApi<T = unknown>(options: TwitchApiCallOptions): Promise<T>;
    /**
     * A group of Kraken API methods.
     *
     * @deprecated Use Helix wherever possible.
     */
    get kraken(): KrakenApiGroup;
    /**
     * A group of Helix API methods.
     */
    get helix(): HelixApiGroup;
    /**
     * The API methods that deal with badges.
     */
    get badges(): BadgesApi;
    /**
     * Various API methods that are not officially supported by Twitch.
     */
    get unsupported(): UnsupportedApi;
    /** @private */
    get _authProvider(): AuthProvider;
    private _callApiInternal;
}
//# sourceMappingURL=ApiClient.d.ts.map