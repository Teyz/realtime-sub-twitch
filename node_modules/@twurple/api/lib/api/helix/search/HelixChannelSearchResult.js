"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixChannelSearchResult = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * The result of a channel search.
 */
let HelixChannelSearchResult = class HelixChannelSearchResult {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The language of the channel.
     */
    get language() {
        return this._data.broadcaster_language;
    }
    /**
     * The ID of the channel.
     */
    get id() {
        return this._data.id;
    }
    /**
     * The name of the channel.
     */
    get name() {
        return this._data.broadcaster_login;
    }
    /**
     * The display name of the channel.
     */
    get displayName() {
        return this._data.display_name;
    }
    /**
     * Retrieves additional information about the owner of the channel.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.id));
    }
    /**
     * The ID of the game currently played on the channel.
     */
    get gameId() {
        return this._data.game_id;
    }
    /**
     * Retrieves information about the game that is being played on the stream.
     */
    async getGame() {
        return (await this._client.helix.games.getGameById(this._data.game_id));
    }
    /**
     * Whether the channel is currently live.
     */
    get isLive() {
        return this._data.is_live;
    }
    /**
     * The IDs of the tags set on the channel.
     */
    get tagIds() {
        return this._data.tag_ids;
    }
    /**
     * Retrieves the tags of the channel.
     */
    async getTags() {
        return await this._client.helix.tags.getStreamTagsByIds(this._data.tag_ids);
    }
    /**
     * The thumbnail URL of the stream.
     */
    get thumbnailUrl() {
        return this._data.thumbnail_url;
    }
    /**
     * The start date of the stream. Returns `null` if the stream is not live.
     */
    get startDate() {
        return this._data.is_live ? new Date(this._data.started_at) : null;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixChannelSearchResult.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixChannelSearchResult.prototype, "_client", void 0);
HelixChannelSearchResult = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixChannelSearchResult', 'id')
], HelixChannelSearchResult);
exports.HelixChannelSearchResult = HelixChannelSearchResult;
