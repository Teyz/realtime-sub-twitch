"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixEventSubSubscription = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An EventSub subscription.
 */
let HelixEventSubSubscription = class HelixEventSubSubscription {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The ID of the subscription.
     */
    get id() {
        return this._data.id;
    }
    /**
     * The status of the subscription.
     */
    get status() {
        return this._data.status;
    }
    /**
     * The event type that the subscription is listening to.
     */
    get type() {
        return this._data.type;
    }
    /**
     * The condition of the subscription.
     */
    get condition() {
        return this._data.condition;
    }
    /**
     * The date and time of creation of the subscription.
     */
    get creationDate() {
        return new Date(this._data.created_at);
    }
    /**
     * End the EventSub subscription.
     */
    async unsubscribe() {
        await this._client.helix.eventSub.deleteSubscription(this._data.id);
    }
    /** @private */
    get _transport() {
        return this._data.transport;
    }
    /** @private */
    set _status(status) {
        this._data.status = status;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixEventSubSubscription.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixEventSubSubscription.prototype, "_client", void 0);
HelixEventSubSubscription = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixEventSubSubscription', 'id')
], HelixEventSubSubscription);
exports.HelixEventSubSubscription = HelixEventSubSubscription;
