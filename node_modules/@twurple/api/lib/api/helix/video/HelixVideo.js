"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixVideo = void 0;
const tslib_1 = require("tslib");
const cache_decorators_1 = require("@d-fischer/cache-decorators");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * A video on Twitch.
 */
let HelixVideo = class HelixVideo {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The ID of the video.
     */
    get id() {
        return this._data.id;
    }
    /**
     * The ID of the user who created the video.
     */
    get userId() {
        return this._data.user_id;
    }
    /**
     * The name of the user who created the video.
     */
    get userName() {
        return this._data.user_login;
    }
    /**
     * The display name of the user who created the video.
     */
    get userDisplayName() {
        return this._data.user_name;
    }
    /**
     * Retrieves information about the user who created the video.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.user_id));
    }
    /**
     * The title of the video.
     */
    get title() {
        return this._data.title;
    }
    /**
     * The description of the video.
     */
    get description() {
        return this._data.description;
    }
    /**
     * The date when the video was created.
     */
    get creationDate() {
        return new Date(this._data.created_at);
    }
    /**
     * The date when the video was published.
     */
    get publishDate() {
        return new Date(this._data.published_at);
    }
    /**
     * The URL of the video.
     */
    get url() {
        return this._data.url;
    }
    /**
     * The URL of the thumbnail of the video.
     */
    get thumbnailUrl() {
        return this._data.thumbnail_url;
    }
    /**
     * Whether the video is public or not.
     */
    get isPublic() {
        return this._data.viewable === 'public';
    }
    /**
     * The number of views of the video.
     */
    get views() {
        return this._data.view_count;
    }
    /**
     * The language of the video.
     */
    get language() {
        return this._data.language;
    }
    /**
     * The type of the video.
     */
    get type() {
        return this._data.type;
    }
    /**
     * The duration of the video, as formatted by Twitch.
     */
    get duration() {
        return this._data.duration;
    }
    /**
     * The duration of the video, in seconds.
     */
    get durationInSeconds() {
        const parts = this._data.duration.match(/\d+[hms]/g);
        if (!parts) {
            throw new common_1.HellFreezesOverError(`Could not parse duration string: ${this._data.duration}`);
        }
        return parts
            .map(part => {
            const partialMatch = /(\d+)([hms])/.exec(part);
            if (!partialMatch) {
                throw new common_1.HellFreezesOverError(`Could not parse partial duration string: ${part}`);
            }
            const [, num, unit] = partialMatch;
            return parseInt(num, 10) * { h: 3600, m: 60, s: 1 }[unit];
        })
            .reduce((a, b) => a + b);
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixVideo.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixVideo.prototype, "_client", void 0);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], HelixVideo.prototype, "durationInSeconds", null);
HelixVideo = tslib_1.__decorate([
    cache_decorators_1.Cacheable,
    common_1.rtfm('api', 'HelixVideo', 'id')
], HelixVideo);
exports.HelixVideo = HelixVideo;
