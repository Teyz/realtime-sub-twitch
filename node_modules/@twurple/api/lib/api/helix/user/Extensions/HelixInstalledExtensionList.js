"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixInstalledExtensionList = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
const HelixInstalledExtension_1 = require("./HelixInstalledExtension");
/**
 * A list of extensions installed in a channel.
 */
let HelixInstalledExtensionList = class HelixInstalledExtensionList {
    /** @private */
    constructor(data) {
        this._data = data;
    }
    getExtensionAtSlot(type, slotId) {
        const data = this._data[type][slotId];
        return data.active ? new HelixInstalledExtension_1.HelixInstalledExtension(type, slotId, data) : null;
    }
    getExtensionsForSlotType(type) {
        return [...Object.entries(this._data[type])]
            .filter((entry) => entry[1].active)
            .map(([slotId, slotData]) => new HelixInstalledExtension_1.HelixInstalledExtension(type, slotId, slotData));
    }
    getAllExtensions() {
        return [...Object.entries(this._data)].flatMap(([type, typeEntries]) => [...Object.entries(typeEntries)]
            .filter((entry) => entry[1].active)
            .map(([slotId, slotData]) => new HelixInstalledExtension_1.HelixInstalledExtension(type, slotId, slotData)));
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixInstalledExtensionList.prototype, "_data", void 0);
HelixInstalledExtensionList = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixInstalledExtensionList')
], HelixInstalledExtensionList);
exports.HelixInstalledExtensionList = HelixInstalledExtensionList;
