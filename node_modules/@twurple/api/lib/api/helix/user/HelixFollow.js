"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixFollow = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * A relation of a user following a broadcaster.
 */
let HelixFollow = class HelixFollow {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The user ID of the following user.
     */
    get userId() {
        return this._data.from_id;
    }
    /**
     * The name of the following user.
     */
    get userName() {
        return this._data.from_login;
    }
    /**
     * The display name of the following user.
     */
    get userDisplayName() {
        return this._data.from_name;
    }
    /**
     * Retrieves the data of the following user.
     */
    async getUser() {
        return (await this._client.helix.users.getUserById(this._data.from_id));
    }
    /**
     * The user ID of the followed broadcaster.
     */
    get followedUserId() {
        return this._data.to_id;
    }
    /**
     * The name of the followed user.
     */
    get followedUserName() {
        return this._data.to_login;
    }
    /**
     * The display name of the followed user.
     */
    get followedUserDisplayName() {
        return this._data.to_name;
    }
    /**
     * Retrieves the data of the followed broadcaster.
     */
    async getFollowedUser() {
        return (await this._client.helix.users.getUserById(this._data.to_id));
    }
    /**
     * The date when the user followed the broadcaster.
     */
    get followDate() {
        return new Date(this._data.followed_at);
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixFollow.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixFollow.prototype, "_client", void 0);
HelixFollow = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixFollow')
], HelixFollow);
exports.HelixFollow = HelixFollow;
