"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixExtensionsApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixExtensionTransaction_1 = require("./HelixExtensionTransaction");
/**
 * The Helix API methods that deal with extensions.
 *
 * Can be accessed using `client.helix.extensions` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const transactions = await api.helix.extionsions.getExtensionTransactions('abcd');
 * ```
 */
let HelixExtensionsApi = class HelixExtensionsApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    async getExtensionTransactions(extensionId, filter = {}) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'extensions/transactions',
            query: {
                extension_id: extensionId,
                id: filter.transactionIds,
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixExtensionTransaction_1.HelixExtensionTransaction, this._client);
    }
    /**
     * Creates a paginator for transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    getExtensionTransactionsPaginated(extensionId, filter = {}) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'extensions/transactions',
            query: {
                extension_id: extensionId,
                id: filter.transactionIds
            }
        }, this._client, data => new HelixExtensionTransaction_1.HelixExtensionTransaction(data, this._client));
    }
};
HelixExtensionsApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixExtensionsApi')
], HelixExtensionsApi);
exports.HelixExtensionsApi = HelixExtensionsApi;
