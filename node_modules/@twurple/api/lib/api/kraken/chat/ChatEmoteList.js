"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatEmoteList = void 0;
const tslib_1 = require("tslib");
const cache_decorators_1 = require("@d-fischer/cache-decorators");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * A list of emotes.
 */
let ChatEmoteList = class ChatEmoteList {
    /** @private */
    constructor(data) {
        this._data = data;
    }
    /**
     * A list of all emotes in the list.
     */
    get emotes() {
        return this._data.map(emote => new common_1.ChatEmote(emote));
    }
    /**
     * Gets all emotes from the list that are from a given emote set.
     *
     * @param setId
     */
    getAllFromSet(setId) {
        return this._data.filter(emote => emote.emoticon_set === setId).map(emote => new common_1.ChatEmote(emote));
    }
    /**
     * Finds a single emote by its ID.
     *
     * @param id
     */
    getById(id) {
        const data = this._data.find(emote => emote.id === id);
        return data ? new common_1.ChatEmote(data) : null;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], ChatEmoteList.prototype, "_data", void 0);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ChatEmoteList.prototype, "emotes", null);
tslib_1.__decorate([
    cache_decorators_1.Cached()
], ChatEmoteList.prototype, "getAllFromSet", null);
tslib_1.__decorate([
    cache_decorators_1.Cached()
], ChatEmoteList.prototype, "getById", null);
ChatEmoteList = tslib_1.__decorate([
    cache_decorators_1.Cacheable,
    common_1.rtfm('api', 'ChatEmoteList')
], ChatEmoteList);
exports.ChatEmoteList = ChatEmoteList;
