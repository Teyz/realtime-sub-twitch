"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * A Twitch video.
 */
let Video = class Video {
    /** @private */
    constructor(data, client) {
        this._data = data;
        this._client = client;
    }
    /**
     * The ID of the video.
     */
    get id() {
        return this._data._id;
    }
    /**
     * The ID of the channel the video was uploaded to.
     */
    get channelId() {
        return this._data.channel._id;
    }
    /**
     * The name of the channel the video was uploaded to.
     */
    get channelName() {
        return this._data.channel.name;
    }
    /**
     * The display name of the channel the video was uploaded to.
     */
    get channelDisplayName() {
        return this._data.channel.display_name;
    }
    /**
     * Retrieves more information about the channel the video was uploaded to.
     */
    async getChannel() {
        return await this._client.kraken.channels.getChannel(this._data.channel._id);
    }
    /**
     * The date when the video was created.
     */
    get creationDate() {
        return new Date(this._data.created_at);
    }
    /**
     * The description of the video.
     */
    get description() {
        return this._data.description;
    }
    /**
     * The description of the video in HTML.
     */
    get htmlDescription() {
        return this._data.description_html;
    }
    /**
     * The resolutions the video is available in.
     */
    get resolutions() {
        return this._data.resolutions;
    }
    /**
     * Gets the FPS (frames per second) of the video for a given resolution.
     *
     * @param resolution The resolution to get FPS for. This is the *key* of the resolutions object.
     */
    getFps(resolution) {
        return this._data.fps[resolution];
    }
    /**
     * The name of the game shown in the video.
     */
    get gameName() {
        return this._data.game;
    }
    /**
     * The language of the video.
     */
    get language() {
        return this._data.language;
    }
    /**
     * The length of the video, in seconds.
     */
    get length() {
        return this._data.length;
    }
    /**
     * The muted segments of the video.
     */
    get mutedSegments() {
        return this._data.muted_segments;
    }
    /**
     * Gets the URL for a given size of the video.
     *
     * @param size The size of the preview.
     */
    getPreview(size) {
        return this._data.preview[size];
    }
    /**
     * The date when the video was published.
     */
    get publishDate() {
        return new Date(this._data.published_at);
    }
    /**
     * The status of the video.
     */
    get status() {
        return this._data.status;
    }
    /**
     * A list of tags of the video.
     */
    get tags() {
        return this._data.tag_list.split(',');
    }
    /**
     * Gets a list of thumbnails for a given size of the video.
     *
     * @param size
     */
    getThumbnails(size) {
        return this._data.thumbnails[size];
    }
    /**
     * The title of the video.
     */
    get title() {
        return this._data.title;
    }
    /**
     * The URL of the video.
     */
    get url() {
        return this._data.url;
    }
    /**
     * Whether the video is public.
     */
    get isPublic() {
        return this._data.viewable === 'public';
    }
    /**
     * The time when the video will be viewable publicly.
     */
    get viewabilityDate() {
        return this._data.viewable_at ? new Date(this._data.viewable_at) : null;
    }
    /**
     * The number of views of the video.
     */
    get views() {
        return this._data.views;
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], Video.prototype, "_data", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], Video.prototype, "_client", void 0);
Video = tslib_1.__decorate([
    common_1.rtfm('api', 'Video', 'id')
], Video);
exports.Video = Video;
