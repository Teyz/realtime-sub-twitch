"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const Channel_1 = require("../channel/Channel");
const Stream_1 = require("../stream/Stream");
/**
 * The API methods that deal with searching.
 *
 * Can be accessed using `client.kraken.search` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.kraken.search.searchStreams('Hearthstone');
 * ```
 */
let SearchApi = class SearchApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of channels that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    async searchChannels(term, page, limit = 25) {
        const query = { query: term, limit: limit.toString() };
        if (page) {
            query.offset = ((page - 1) * limit).toString();
        }
        const data = await this._client.callApi({ url: 'search/channels', query });
        return data.channels.map(channelData => new Channel_1.Channel(channelData, this._client));
    }
    /**
     * Retrieves a list of streams that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     * @param hls Whether you want only HLS or only non-HLS (RTMP) streams. If not set, finds both types of streams.
     */
    async searchStreams(term, page, limit = 25, hls) {
        const query = { query: term, limit: limit.toString() };
        if (page) {
            query.offset = ((page - 1) * limit).toString();
        }
        if (hls !== undefined) {
            query.hls = hls.toString();
        }
        const data = await this._client.callApi({ url: 'search/streams', query });
        return data.streams.map(streamData => new Stream_1.Stream(streamData, this._client));
    }
};
SearchApi = tslib_1.__decorate([
    common_1.rtfm('api', 'SearchApi')
], SearchApi);
exports.SearchApi = SearchApi;
