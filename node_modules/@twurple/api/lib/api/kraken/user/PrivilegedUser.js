"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivilegedUser = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const User_1 = require("./User");
/**
 * A user you have extended privileges for, i.e. the currently authenticated user.
 *
 * @inheritDoc
 */
let PrivilegedUser = class PrivilegedUser extends User_1.User {
    /**
     * The user's email address.
     */
    get email() {
        return this._data.email;
    }
    /**
     * Whether the user's email address is verified.
     */
    get isEmailVerified() {
        return this._data.email_verified;
    }
    /**
     * Whether the user has email notifications enabled.
     */
    get hasEmailNotifications() {
        return this._data.notifications.email;
    }
    /**
     * Whether the user has push notifications enabled.
     */
    get hasPushNotifications() {
        return this._data.notifications.push;
    }
    /**
     * Whether the user is partnered.
     */
    get isPartnered() {
        return this._data.partnered;
    }
    /**
     * Whether the user has a Twitter account connected.
     */
    get hasTwitter() {
        return this._data.twitter_connected;
    }
    /**
     * Follows a channel.
     *
     * @param channel The channel to follow.
     * @param notifications Whether the user will receive notifications.
     */
    async followChannel(channel, notifications) {
        return await this._client.kraken.users.followChannel(this, channel, notifications);
    }
    /**
     * Unfollows a channel.
     *
     * @param channel The channel to unfollow.
     */
    async unfollowChannel(channel) {
        await this._client.kraken.users.unfollowChannel(this, channel);
    }
    /**
     * Blocks a user.
     *
     * @param userToBlock The user to block.
     */
    async blockUser(userToBlock) {
        return await this._client.kraken.users.blockUser(this, userToBlock);
    }
    /**
     * Unblocks a user.
     *
     * @param userToUnblock The user to unblock.
     */
    async unblockUser(userToUnblock) {
        await this._client.kraken.users.unblockUser(this, userToUnblock);
    }
};
PrivilegedUser = tslib_1.__decorate([
    common_1.rtfm('api', 'PrivilegedUser', 'id')
], PrivilegedUser);
exports.PrivilegedUser = PrivilegedUser;
